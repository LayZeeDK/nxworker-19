name: Weekly Dependency Update

on:
  schedule:
    # Every Monday at 03:00 UTC
    - cron: '0 3 * * 1'
  workflow_dispatch: # allow manual trigger

permissions:
  contents: write # commit npm update changes, gh pr merge command
  pull-requests: write # peter-evans/create-pull-request action, gh pr merge command
  actions: write # gh workflow run command
  statuses: write # update commit status after dispatched CI run

jobs:
  update-deps:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: .node-version
          cache: npm

      - name: Update dependencies to latest version compatible with version range
        run: npm update --package-lock-only
      - name: Commit npm update changes
        id: commit-update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet -- package.json package-lock.json; then
            echo "changes=false" >> "$GITHUB_OUTPUT"
          else
            git add package.json package-lock.json
            git commit -m "chore: update dependencies to latest compatible versions"
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Fix vulnerabilities while complying with version ranges
        run: |
          set +e
          npm audit fix --package-lock-only
          status=$?
          set -e
          if [ "$status" -eq 0 ]; then
            exit 0
          fi

          if [ "$status" -eq 1 ]; then
            echo "npm audit fix exited with code 1; clearing Git history to prevent unintended changes."
            git reset --hard HEAD
            exit 0
          fi

          exit "$status"

      - name: Commit changes
        id: commit-changes
        env:
          UPDATE_CHANGES: ${{ steps.commit-update.outputs.changes }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet -- package.json package-lock.json; then
            if [ "$UPDATE_CHANGES" = "true" ]; then
              echo "changes=true" >> "$GITHUB_OUTPUT"
            else
              echo "changes=false" >> "$GITHUB_OUTPUT"
            fi
          else
            git add package.json package-lock.json
            git commit -m "chore: patch dependency vulnerabilities"
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        if: ${{ steps.commit-changes.outputs.changes == 'true' }}
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: chore/update-dependencies
          title: 'chore: update dependencies to latest compatible versions'
          body: |
            This PR was automatically generated by the weekly dependency update workflow.
            It updates all dependencies to their latest compatible versions.
          commit-message: 'chore: update dependencies to latest compatible versions'
          labels: dependencies
      - name: Trigger CI workflow for dependency update branch
        if: ${{ steps.commit-changes.outputs.changes == 'true' && steps.create-pull-request.outputs.pull-request-number }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          start_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          gh workflow run ci.yml --ref chore/update-dependencies
          echo "Waiting for dispatched CI workflow run to start..."
          run_id=""
          run_json=""
          for attempt in $(seq 1 30); do
            run_json=$(gh run list --workflow ci.yml --branch chore/update-dependencies --limit 20 --json databaseId,status,createdAt)
            run_id=$(echo "$run_json" | jq -r 'map(select(.status != "completed")) | first | .databaseId // empty')
            if [ -n "$run_id" ]; then
              break
            fi
            sleep 5
          done

          if [ -z "$run_id" ]; then
            run_id=$(echo "$run_json" | jq -r --arg start "$start_time" 'map(select(.createdAt >= $start)) | first | .databaseId // empty')
          fi

          if [ -z "$run_id" ]; then
            echo "::error::Unable to find the dispatched ci.yml run for branch chore/update-dependencies"
            exit 1
          fi

          set +e
          gh run watch "$run_id" --exit-status
          watch_status=$?
          set -e

          run_info=$(gh run view "$run_id" --json headSha,url)
          head_sha=$(echo "$run_info" | jq -r '.headSha')
          target_url=$(echo "$run_info" | jq -r '.url')

          if [ -z "$head_sha" ]; then
            echo "::error::Unable to determine head SHA for CI run $run_id"
            exit 1
          fi

          if [ $watch_status -eq 0 ]; then
            status_state="success"
            status_description="ci.yml (workflow_dispatch) succeeded"
          else
            status_state="failure"
            status_description="ci.yml (workflow_dispatch) failed"
          fi

          gh api "repos/$GITHUB_REPOSITORY/statuses/$head_sha" \
            -f state="$status_state" \
            -f context='CI / main' \
            -f description="$status_description" \
            -f target_url="${target_url:-https://github.com/$GITHUB_REPOSITORY/actions/runs/$run_id}"

          if [ $watch_status -ne 0 ]; then
            exit $watch_status
          fi

      - name: Enable Pull Request Automerge
        if: ${{ steps.commit-changes.outputs.changes == 'true' && steps.create-pull-request.outputs.pull-request-number }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh pr merge --merge --auto "${{ steps.create-pull-request.outputs.pull-request-number }}"
